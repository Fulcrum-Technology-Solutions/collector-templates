{
  "type": "collection",
  "ttl": "4h",
  "removeFields": [],
  "resumeOnBoot": false,
  "schedule": {},
  "streamtags": [],
  "workerAffinity": false,
  "collector": {
    "conf": {
      "discovery": {
        "discoverType": "none"
      },
      "collectMethod": "post_with_body",
      "pagination": {
        "type": "response_body",
        "maxPages": 0,
        "attribute": [
          "endCursor"
        ],
        "lastPageExpr": "hasNextPage === false"
      },
      "authentication": "oauth",
      "timeout": 0,
      "useRoundRobinDns": false,
      "disableTimeFilter": false,
      "rejectUnauthorized": false,
      "safeHeaders": [],
      "retryRules": {
        "type": "backoff",
        "interval": 1000,
        "limit": 5,
        "multiplier": 2,
        "codes": [
          429,
          503
        ],
        "enableHeader": true
      },
      "loginUrl": "'<login_url|Specific to your Wiz account.  Something like: https://auth.app.wiz.io/oauth/token.  Wiz may refer to this as your Auth URL.>'",
      "tokenRespAttribute": "access_token",
      "authHeaderKey": "Authorization",
      "authHeaderExpr": "`Bearer ${token}`",
      "clientSecretParamName": "client_secret",
      "collectUrl": "'<collect_url|Specific to your Wiz account.  Something like: https://api.us17.app.wiz.io/graphql.  Wiz may refer to this as your API Endpoint.>'",
      "collectBody": "'{\"query\": \"query AuditLogTable($first: Int $after: String $filterBy: AuditLogEntryFilters){auditLogEntries(first: $first after: $after filterBy: $filterBy) {nodes {id action requestId status timestamp actionParameters userAgent sourceIP serviceAccount {id name} user {id name}} pageInfo {hasNextPage endCursor}}}\",\"variables\": {\"first\": 50, \"filterBy\": {\"status\": [\"SUCCESS\", \"FAILED\",\"INVALID\",\"ACCESS_DENIED\"], \"timestamp\": {\"after\": \"' + `${earliest ? C.Time.strftime(earliest,'%Y-%m-%dT%H:%M:%SZ') : C.Time.strftime(Date.now()/1000 - 86400,'%Y-%m-%dT%H:%M:%SZ')}` + '\",\"before\": \"' + `${latest ? C.Time.strftime(latest,'%Y-%m-%dT%H:%M:%SZ') : C.Time.strftime(Date.now()/1000,'%Y-%m-%dT%H:%M:%SZ')}` + '\"}       }}}'",
      "collectRequestHeaders": [
        {
          "name": "accept",
          "value": "'application/json'"
        },
        {
          "name": "content-type",
          "value": "'application/json'"
        }
      ],
      "clientSecretParamValue":  "'<client_secret_value|Specific to your Wiz account.  Should be a 64 character string.  Wiz may refer to this as your Client Secret.>'",
      "authRequestParams": [
        {
          "name": "client_id",
          "value": "'<client_id_value|Specific to your Wiz account.  Should be a 53 character string.  Wiz may refer to this as your Client ID.>'"
        },
        {
          "name": "audience",
          "value": "wiz-api"
        },
        {
          "name": "grant_type",
          "value": "client_credentials"
        }
      ]
    },
    "destructive": false,
    "type": "rest"
  },
  "input": {
    "type": "collection",
    "staleChannelFlushMs": 10000,
    "sendToRoutes": true,
    "preprocess": {
      "disabled": true
    },
    "throttleRatePerSec": "0",
    "breakerRulesets": [
      "wiz-api"
    ]
  },
  "savedState": {},
  "id": "collector-wiz-auditlogentries"
}
